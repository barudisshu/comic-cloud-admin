/*
 * This file is generated by jOOQ.
 */
package info.galudisu.comic.model.tables;


import info.galudisu.comic.converter.InstantConverter;
import info.galudisu.comic.model.Comic;
import info.galudisu.comic.model.Indexes;
import info.galudisu.comic.model.Keys;
import info.galudisu.comic.model.tables.records.ClientsRecord;

import java.time.Instant;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Clients extends TableImpl<ClientsRecord> {

    private static final long serialVersionUID = -808335898;

    public static final Clients CLIENTS = new Clients();

    @Override
    public Class<ClientsRecord> getRecordType() {
        return ClientsRecord.class;
    }

    public final TableField<ClientsRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    public final TableField<ClientsRecord, String> UID = createField("UID", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    public final TableField<ClientsRecord, String> OWNER_ID = createField("OWNER_ID", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    public final TableField<ClientsRecord, String> CLIENT_ID = createField("CLIENT_ID", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    public final TableField<ClientsRecord, String> CLIENT_SECRET = createField("CLIENT_SECRET", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    public final TableField<ClientsRecord, String> REDIRECT_URI = createField("REDIRECT_URI", org.jooq.impl.SQLDataType.VARCHAR(2000), this, "");

    public final TableField<ClientsRecord, Instant> CREATED_AT = createField("CREATED_AT", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "", new InstantConverter());

    public final TableField<ClientsRecord, String> CREATED_BY = createField("CREATED_BY", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    public final TableField<ClientsRecord, Instant> UPDATED_AT = createField("UPDATED_AT", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "", new InstantConverter());

    public final TableField<ClientsRecord, String> UPDATED_BY = createField("UPDATED_BY", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    public Clients() {
        this(DSL.name("clients"), null);
    }

    public Clients(String alias) {
        this(DSL.name(alias), CLIENTS);
    }

    public Clients(Name alias) {
        this(alias, CLIENTS);
    }

    private Clients(Name alias, Table<ClientsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Clients(Name alias, Table<ClientsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Clients(Table<O> child, ForeignKey<O, ClientsRecord> key) {
        super(child, key, CLIENTS);
    }

    @Override
    public Schema getSchema() {
        return Comic.COMIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CLIENTS_CLIENT_CLIENT_ID_IDX, Indexes.CLIENTS_CLIENT_CLIENT_SECRET_IDX, Indexes.CLIENTS_CLIENT_ID, Indexes.CLIENTS_CLIENT_SECRET, Indexes.CLIENTS_ID, Indexes.CLIENTS_OWNER_ID, Indexes.CLIENTS_PRIMARY, Indexes.CLIENTS_UID);
    }

    @Override
    public Identity<ClientsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CLIENTS;
    }

    @Override
    public UniqueKey<ClientsRecord> getPrimaryKey() {
        return Keys.KEY_CLIENTS_PRIMARY;
    }

    @Override
    public List<UniqueKey<ClientsRecord>> getKeys() {
        return Arrays.<UniqueKey<ClientsRecord>>asList(Keys.KEY_CLIENTS_PRIMARY, Keys.KEY_CLIENTS_ID, Keys.KEY_CLIENTS_UID, Keys.KEY_CLIENTS_OWNER_ID, Keys.KEY_CLIENTS_CLIENT_CLIENT_ID_IDX, Keys.KEY_CLIENTS_CLIENT_ID, Keys.KEY_CLIENTS_CLIENT_CLIENT_SECRET_IDX, Keys.KEY_CLIENTS_CLIENT_SECRET);
    }

    @Override
    public Clients as(String alias) {
        return new Clients(DSL.name(alias), this);
    }

    @Override
    public Clients as(Name alias) {
        return new Clients(alias, this);
    }

    @Override
    public Clients rename(String name) {
        return new Clients(DSL.name(name), null);
    }

    @Override
    public Clients rename(Name name) {
        return new Clients(name, null);
    }
}
